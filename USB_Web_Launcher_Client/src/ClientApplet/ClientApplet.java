/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ClientApplet;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author PPV
 */
public class ClientApplet extends javax.swing.JApplet {

    public static int ammo=4;
    private String ipAddress;
    /**
     * In case permissions are needed, use the following code:
     * SocketPermission p1=new SocketPermission(ipAddress+":1024-65535", "connect,resolve");
     */
    /**
     * Initializes ClientApplet
     */
    @Override
    public void init() {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        ipAddress=this.getCodeBase().toString();
        //</editor-fold>
        /*
         * Create and display the applet
         */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                @Override
                public void run() {
                    initComponents();
                }
            });
        } catch (InterruptedException ex) {
            ex.getCause().printStackTrace();
        }
        catch (InvocationTargetException ex) {
            ex.getCause().printStackTrace();
        }
    }
    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(320, 160));
        setMinimumSize(new java.awt.Dimension(320, 160));
        setPreferredSize(new java.awt.Dimension(320, 160));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Controls"));
        jPanel1.setMaximumSize(new java.awt.Dimension(320, 160));
        jPanel1.setMinimumSize(new java.awt.Dimension(320, 160));
        jPanel1.setName("");
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(320, 160));
        Action pressedW=new UpAction(ipAddress,jButton5,jPanel1);
        Action releasedW=new releasedUpAction(ipAddress,jButton5,jPanel1);
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("W"),"pressedW");
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released W"),"releasedW");
        jPanel1.getActionMap().put("pressedW", pressedW);
        jPanel1.getActionMap().put("releasedW", releasedW);
        Action pressedA=new LeftAction(ipAddress,jButton5,jPanel1);
        Action releasedA=new releasedLeftAction(ipAddress,jButton5,jPanel1);
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("A"),"pressedA");
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released A"),"releasedA");
        jPanel1.getActionMap().put("pressedA", pressedA);
        jPanel1.getActionMap().put("releasedA", releasedA);
        Action pressedS=new DownAction(ipAddress,jButton5,jPanel1);
        Action releasedS=new releasedDownAction(ipAddress,jButton5,jPanel1);
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("S"),"pressedS");
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released S"),"releasedS");
        jPanel1.getActionMap().put("pressedS", pressedS);
        jPanel1.getActionMap().put("releasedS", releasedS);
        Action pressedD=new RightAction(ipAddress,jButton5,jPanel1);
        Action releasedD=new releasedRightAction(ipAddress,jButton5,jPanel1);
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("D"),"pressedD");
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released D"),"releasedD");
        jPanel1.getActionMap().put("pressedD", pressedD);
        jPanel1.getActionMap().put("releasedD", releasedD);
        Action typedSpace=new FireAction(ipAddress,jButton5,jButton2,jButton4,jButton1,jButton3,jLabel2,jPanel1);
        jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("SPACE"),"typedSpace");
        jPanel1.getActionMap().put("typedSpace", typedSpace);

        jButton3.setText("RIGHT");
        jButton3.setMaximumSize(new java.awt.Dimension(73, 23));
        jButton3.setMinimumSize(new java.awt.Dimension(73, 23));
        jButton3.setOpaque(false);
        jButton3.setPreferredSize(new java.awt.Dimension(73, 23));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton3MouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jButton3.getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "none");

        jButton2.setText("UP");
        jButton2.setMaximumSize(new java.awt.Dimension(73, 23));
        jButton2.setMinimumSize(new java.awt.Dimension(73, 23));
        jButton2.setOpaque(false);
        jButton2.setPreferredSize(new java.awt.Dimension(73, 23));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });
        jButton2.getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "none");

        jButton4.setText("DOWN");
        jButton4.setMaximumSize(new java.awt.Dimension(73, 23));
        jButton4.setMinimumSize(new java.awt.Dimension(73, 23));
        jButton4.setOpaque(false);
        jButton4.setPreferredSize(new java.awt.Dimension(73, 23));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton4MouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });
        jButton4.getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "none");

        jButton1.setText("LEFT");
        jButton1.setMaximumSize(new java.awt.Dimension(73, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(73, 23));
        jButton1.setOpaque(false);
        jButton1.setPreferredSize(new java.awt.Dimension(73, 23));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "none");

        jButton5.setText("FIRE");
        jButton5.setToolTipText("");
        jButton5.setMaximumSize(new java.awt.Dimension(73, 23));
        jButton5.setMinimumSize(new java.awt.Dimension(73, 23));
        jButton5.setOpaque(false);
        jButton5.setPreferredSize(new java.awt.Dimension(73, 23));
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Incised901 BdCn BT", 0, 14)); // NOI18N
        jLabel2.setText("REMAINING MISSILES: "+ammo);
        jLabel2.getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "none");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel2)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        long time=System.currentTimeMillis();
        if(jButton5.isEnabled()&&ammo>0) {
            try {
                URL fire=new URL(ipAddress+"gun/fire/");
                URLConnection connection=fire.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            (new Thread(new Runnable() {
                @Override
                public void run() {
                    jButton5.setEnabled(false);
                    jButton4.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton2.setEnabled(false);
                    jButton1.setEnabled(false);
                    try {
                        Thread.sleep(10000);
                    } catch(InterruptedException ex) {
                        Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jButton1.setEnabled(true);
                    jButton2.setEnabled(true);
                    jButton3.setEnabled(true);
                    jButton4.setEnabled(true);
                    jButton5.setEnabled(true);
                }
            })).start();
            if(ammo>0) {
                ammo--;
                jLabel2.setText("REMAINING MISSILES: "+ammo);
                jLabel2.repaint();
            }
        }
        else {
            if(ammo<=0) {
                JOptionPane.showMessageDialog(jPanel1,"There are no more missiles.",null,JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(jPanel1,"Already in the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        if(jButton5.isEnabled()) {
            try {
                URL up=new URL(ipAddress+"gun/up/");
                URLConnection connection=up.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2MouseReleased

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        if(jButton5.isEnabled()) {
            try {
                URL left=new URL(ipAddress+"gun/left/");
                URLConnection connection=left.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1MouseReleased

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        if(jButton5.isEnabled()) {
            try {
                URL right=new URL(ipAddress+"gun/right/");
                URLConnection connection=right.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseReleased
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3MouseReleased

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
        if(jButton5.isEnabled()) {
            try {
                URL down=new URL(ipAddress+"gun/down/");
                URLConnection connection=down.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton4MousePressed

    private void jButton4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseReleased
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton4MouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
class UpAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public UpAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL up=new URL(ipAddress+"gun/up/");
                URLConnection connection=up.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class releasedUpAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public releasedUpAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class DownAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public DownAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL down=new URL(ipAddress+"gun/down/");
                URLConnection connection=down.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class releasedDownAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public releasedDownAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class LeftAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public LeftAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL left=new URL(ipAddress+"gun/left/");
                URLConnection connection=left.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class releasedLeftAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public releasedLeftAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class RightAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public RightAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL right=new URL(ipAddress+"gun/right/");
                URLConnection connection=right.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class releasedRightAction extends AbstractAction {
    private String ipAddress;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    public releasedRightAction(String ipAd, JButton fireButton, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jButton5=fireButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if(jButton5.isEnabled()) {
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                URL stop=new URL(ipAddress+"gun/stop/");
                URLConnection connection=stop.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch(IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(jPanel1,"In the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
        }
    }
}
class FireAction extends AbstractAction {
    private String ipAddress;
    public static int ammo=ClientApplet.ammo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    public FireAction(String ipAd, JButton fireButton, JButton upButton, JButton downButton, JButton leftButton, JButton rightButton, JLabel ammoLabel, JPanel panel) {
        ipAddress=ipAd;
        jPanel1=panel;
        jLabel2=ammoLabel;
        jButton5=fireButton;
        jButton1=leftButton;
        jButton2=upButton;
        jButton3=rightButton;
        jButton4=downButton;
    }
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        long time=System.currentTimeMillis();
        ammo=ClientApplet.ammo;
        if(jButton5.isEnabled()&&ammo>0) {
            try {
                URL fire=new URL(ipAddress+"gun/fire/");
                URLConnection connection=fire.openConnection();
                connection.connect();
                BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line=in.readLine();
                while(line!=null) {
                    line=in.readLine();
                }
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
            (new Thread(new Runnable() {
                @Override
                public void run() {
                    jButton5.setEnabled(false);
                    jButton4.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton2.setEnabled(false);
                    jButton1.setEnabled(false);
                    try {
                        Thread.sleep(10000);
                    } catch(InterruptedException ex) {
                        Logger.getLogger(ClientApplet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jButton1.setEnabled(true);
                    jButton2.setEnabled(true);
                    jButton3.setEnabled(true);
                    jButton4.setEnabled(true);
                    jButton5.setEnabled(true);
                }
            })).start();
            if(ammo>0) {
                ammo--;
                ClientApplet.ammo=ammo;
                jLabel2.setText("REMAINING MISSILES: "+ammo);
                jLabel2.repaint();
            }
        }
        else {
            if(ammo<=0) {
                JOptionPane.showMessageDialog(jPanel1,"There are no more missiles.",null,JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(jPanel1,"Already in the process of firing; please wait.",null,JOptionPane.WARNING_MESSAGE);
            }
        }
    }
}